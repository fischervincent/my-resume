---
import 'styles/scrolling-skills.css'

const skills = [
  { name: 'Azure', src:'/logos/azure.png', color:'9, 14, 23', shadowcolor: '51, 175, 236' },
  { name: 'PostgreSQL', src:'/logos/postgresql.png', color: '48, 96, 145' },
  { name: 'MySQL', src:'/logos/mysql.png', shadowcolor: '213, 132, 54' },
  { name: 'MongoDB', src:'/logos/mongodb.svg', color: '0, 104, 74' },
  { name: 'git', src:'/logos/git.svg', color: '240, 80, 51' },
  { name: 'Docker', src:'/logos/docker.png', color: '35, 150, 237' },
  { name: 'AWS', src: '/logos/aws.png', color: '34, 41, 54', shadowcolor: '248, 150, 40' },
  { name: 'GCP', src:'/logos/gcp.png', shadowcolor: '0, 144, 211' },
  { name: 'GraphQL', src:'/logos/graphql.svg', color: '225, 0, 152' },
  { name: 'Terraform', src:'/logos/terraform.png', shadowcolor: '64, 64, 178' },
  { name: 'Serverless Framework', src:'/logos/serverless.png', bgcolor: '34, 34, 34', shadowcolor: '241, 89, 83' },
  { name: 'Cucumber', src:'/logos/cucumber.svg', color: '35, 217, 108' },
  { name: 'Redux', src:'/logos/redux.png', color:'30,30,30', shadowcolor: '117, 73, 188' },
  { name: 'Jest', src:'/logos/jest.png', color:'197, 60, 18' },
  { name: 'Redis', src:'/logos/redis.png', shadowcolor: '216, 44, 32' },
  { name: 'CircleCI', src:'/logos/circleci.png', color: '22, 22, 22' },
  { name: 'NestJS', src:'/logos/nestjs.png', color:'224,35,78'},
  { name: 'NextJS', src:'/logos/nextjs.png', color:'0,0,0', shadowcolor: '189, 180, 250' },
  { name: 'Typescript', src:'/logos/typescript.png', color: '0, 122, 205' },
  { name: 'Github Actions', src:'/logos/gh-actions.png', shadowcolor:'30, 136, 250' },
  { name: 'Lambda', src:'/logos/lambda.png', shadowcolor: '251, 126, 20' },
  { name: 'Node', src:'/logos/node.png', color: '139, 197, 0' },
  { name: 'React', src:'/logos/react-white.png', color: '117, 209, 247' },
  { name: 'JavaScript', src:'/logos/javascript.png', color: '240, 219, 79' },
]

function blackOrWhite(color: string) {
  const [r, g, b] = color.split(',').map(Number)
  const brightness = (r * 299 + g * 587 + b * 114) / 1000
  return brightness > 125 ? '0, 0, 0' : '255, 255, 255'
}

const skillsWithColors = skills.map(({color, shadowcolor: defaultShadowColor, bgcolor: defaultBgColor, ...skill}) => {
  const shadowColor = defaultShadowColor ?? color ?? '100,100,100'
    const bgColor = defaultBgColor ?? color ?? '255,255,255'
    const textColor = blackOrWhite(bgColor)
  return {
    ...skill,
    shadowColor,
    bgColor,
    textColor,
  }
})
let currentY = 1;
let nbInCurrentY = 0;
const skillsWithStart = [...skillsWithColors, ...skillsWithColors, ...skillsWithColors].map((skill) => {
  if(nbInCurrentY > 2) {
    currentY++
    nbInCurrentY = 0;
  }
  nbInCurrentY++
  return {
    ...skill,
    startX: currentY,
    startY: currentY + nbInCurrentY,
  }
})
---
<div class='absolute left-0 top-0 bg-gradient-to-r from-white w-[calc(100%/2-1024px/2)] h-[900px] z-50' />
<div class='absolute right-0 top-20 bg-gradient-to-l from-white w-[calc(100%/2-1024px/2)] h-[1900px] z-50' />
<div class="absolute top-0 left-0 w-screen h-[1400px] overflow-hidden">
  <div class="scrolling-container first">
    {skillsWithStart.map(({name, startX, startY, src, shadowColor, bgColor, textColor}) => {
      return (
        <div class="skill-card relative with-depth" style={`--startX: ${startX}; --startY: ${startY}; --bgcolor: ${bgColor}; --shadowcolor: ${shadowColor}; --textcolor: ${textColor}`}>
          {src ? <img class="m-auto skill-img block w-36 h-36" src={src} /> : null}
          <div class="skill-name">{name}</div>
        </div>
      )
    })}
  </div>
  <div class="scrolling-container second">
    {skillsWithStart.map(({name, startX, startY, src, shadowColor, bgColor, textColor}) => {
      return (
        <div class="skill-card relative with-depth" style={`--startX: ${startX}; --startY: ${startY}; --bgcolor: ${bgColor}; --shadowcolor: ${shadowColor}; --textcolor: ${textColor}`}>
          {src ? <img class="m-auto skill-img block w-36 h-36" src={src} /> : null}
          <div class="skill-name">{name}</div>
        </div>
      )
    })}
  </div>
  <div class="absolute right-16">
    I worked with all this cool tech
  </div>
  
</div>